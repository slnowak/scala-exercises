{
  "title": "Parent Classes",
  "modules": [
    {
      "preparagraph": "In contrast to Java, all values in Scala are objects (including numerical values and functions). Since Scala is class-based, all values are instances of a class.\n\nClass hierarchy is linear, a class can only extend from one parent class:\n",
      "code": "class Worker(val firstName: String, val lastName: String) {}\nclass Employee(override val firstName: String, override val lastName: String,\n               val employeeID: Long) extends Worker(firstName, lastName)\nval me = new Employee(\"Name\", \"Yourself\", 1233)\nme.firstName should be(__)\nme.lastName should be(__)",
      "solutions": [
        "\"Name\"",
        "\"Yourself\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "A class that extends from another is polymorphic:",
      "code": "class Worker(val firstName: String, val lastName: String) {}\nclass Employee(override val firstName: String, override val lastName: String,\n               val employeeID: Long) extends Worker(firstName, lastName)\n\nval me = new Employee(\"Name\", \"Yourself\", 1233)\nval worker: Worker = me\n\nworker.firstName should be(__)\nworker.lastName should be(__)",
      "solutions": [
        "\"Name\"",
        "\"Yourself\""
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "An abstract class, as in Java, cannot be instantiated and only inherited:\n\n```\nabstract class Worker(val firstName: String, val lastName: String) {}\n\n// if you uncomment this line, if will fail compilation\n//val worker = new Worker\n```\n\nA class can be placed inside an abstract class just like in java:",
      "code": "abstract class Worker(val firstName: String, val lastName: String) {\n  class Assignment(val hours: Long) {\n    // nothing to do here.  Just observe that it compiles\n  }\n}\nclass Employee(override val firstName: String, override val lastName: String,\n               val employeeID: Long) extends Worker(firstName, lastName)\n\nval employee = new Employee(\"Name\", \"Yourself\", 2291)\nval assignment = new employee.Assignment(__)  //using the employee instance's path, create an assignment for it.\nassignment.hours should be (__)",
      "solutions": [
        "22",
        "22"
      ],
      "postparagraph": ""
    }
  ]
}