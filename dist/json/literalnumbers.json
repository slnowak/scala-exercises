{
  "title": "Literal Numbers",
  "modules": [
    {
      "preparagraph": "Integer Literals are 32-bit and can be created from decimal, hexadecimal:",
      "code": "val a = 2\nval b = 31\nval c = 0x30F\nval e = 0\nval f = -2\nval g = -31\nval h = -0x30F\na should be(__)\nb should be(__)\nc should be(__) //Hint: 30F = 783\ne should be(__)\nf should be(__)\ng should be(__)\nh should be(__) //Hint: 30F = 783",
      "solutions": [
        "2",
        "31",
        "783",
        "0",
        "-2",
        "-31",
        "-783"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Long Literals are 64 bit, are specified by appending an `L` or `l` at the end:",
      "code": "val a = 2L\nval b = 31L\nval c = 0x30FL\nval e = 0L\nval f = -2l\nval g = -31L\nval h = -0x30FL\n\na should be(__2L)\nb should be(__31L)\nc should be(__783L) //Hint: 30F = 783\ne should be(__0)\nf should be(__-2L)\ng should be(__-31L)\nh should be(__-783L) //Hint: 30F = 783",
      "solutions": [
        "2",
        "31",
        "783",
        "0",
        "-2",
        "-31",
        "-783"
      ],
      "postparagraph": ""
    },
    {
      "preparagraph": "Float and Double Literals are IEEE 754 for specific, Float are 32-bit length, Doubles are 64-bit.\nFloats can be coerced using a f or F suffix, and Doubles can be coerced using a d or D suffix.\nExponent are specified using e or E.",
      "code": "val a = 3.0\nval b = 3.00\nval c = 2.73\nval d = 3f\nval e = 3.22d\nval f = 93e-9\nval g = 93E-9\nval h = 0.0\nval i = 9.23E-9D\n\na should be(__3.0)\nb should be(__3.00)\nc should be(__2.73)\nd should be(__3f)\ne should be(__3.22d)\nf should be(__93e-9)\ng should be(__93E-9)\nh should be(__0.0)\ni should be(__9.23E-9D)",
      "solutions": [
        "3.0",
        "3.0",
        "2.73",
        "3.0",
        "3.22",
        "93e-9",
        "93e-9",
        "0.0",
        "9.23e-9"
      ],
      "postparagraph": ""
    }
  ]
}